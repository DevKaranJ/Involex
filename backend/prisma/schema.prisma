generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  settings  UserSettings?
  
  // Billing entries
  billingEntries BillingEntry[]
  
  // Email analyses
  emailAnalyses EmailAnalysis[]

  @@map("users")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // AI Analysis Settings
  aiAnalysisEnabled    Boolean @default(true)
  autoAnalyzeEmails    Boolean @default(true)
  aiModel              String  @default("gpt-4")
  confidenceThreshold  Float   @default(0.7)

  // Billing Settings
  defaultHourlyRate    Float?
  defaultClient        String?
  defaultMatter        String?
  
  // Practice Management Integration
  practiceManagementProvider String?
  practiceManagementApiKey   String?
  practiceManagementConfig   String? // JSON as text for SQLite

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model EmailAnalysis {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email metadata
  emailId       String
  platform      String // "gmail" | "outlook"
  subject       String
  sender        String
  recipients    String // Comma-separated string for SQLite
  timestamp     DateTime
  threadId      String?

  // Email content
  content       String
  direction     String // "incoming" | "outgoing"

  // AI Analysis results
  isLegalEmail       Boolean
  estimatedTime      Float?
  workType           String?
  suggestedClient    String?
  suggestedMatter    String?
  confidence         Float?
  analysisDetails    String? // JSON as text for SQLite

  // Processing status
  status        String @default("pending") // "pending" | "analyzing" | "complete" | "error"
  errorMessage  String?

  // Billing integration
  billingEntry  BillingEntry?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_analyses")
  @@index([userId, platform])
  @@index([emailId])
}

model BillingEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email reference
  emailAnalysisId String? @unique
  emailAnalysis   EmailAnalysis? @relation(fields: [emailAnalysisId], references: [id])

  // Billing details
  description     String
  timeSpent       Float // in hours
  hourlyRate      Float?
  totalAmount     Float?
  
  // Client/Matter information
  client          String
  matter          String?
  workType        String?

  // Date and time
  workDate        DateTime
  
  // Status
  status          String @default("draft") // "draft" | "submitted" | "billed" | "paid"
  
  // Practice management integration
  externalId      String? // ID in practice management system
  platform        String? // "cleo" | "practice-panther" | "mycase"
  syncedAt        DateTime?
  syncStatus      String @default("pending") // "pending" | "syncing" | "synced" | "error" | "conflict"
  syncError       String? // Error message if sync failed
  lastSyncAttempt DateTime? // Track when last sync was attempted
  syncRetryCount  Int @default(0) // Track retry attempts

  // Sync history
  syncHistory     SyncHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billing_entries")
  @@index([userId, status])
  @@index([workDate])
  @@index([syncStatus])
  @@index([platform, externalId])
}

model SyncHistory {
  id              String   @id @default(cuid())
  billingEntryId  String
  billingEntry    BillingEntry @relation(fields: [billingEntryId], references: [id], onDelete: Cascade)

  // Sync details
  platform        String // "cleo" | "practice-panther" | "mycase"
  action          String // "create" | "update" | "delete"
  status          String // "success" | "error" | "conflict"
  
  // Data snapshot
  dataSnapshot    String? // JSON as text for SQLite
  externalId      String? // ID returned by practice management system
  
  // Error/conflict information
  errorMessage    String?
  conflictReason  String?
  
  // Timing
  syncStartedAt   DateTime @default(now())
  syncCompletedAt DateTime?
  duration        Int? // Duration in milliseconds

  @@map("sync_history")
  @@index([billingEntryId])
  @@index([platform, status])
}

model SyncQueue {
  id              String   @id @default(cuid())
  billingEntryId  String
  
  // Sync configuration
  platform        String // "cleo" | "practice-panther" | "mycase"
  action          String // "create" | "update" | "delete"
  priority        Int @default(5) // 1-10, higher number = higher priority
  
  // Retry configuration
  maxRetries      Int @default(3)
  currentRetries  Int @default(0)
  retryDelay      Int @default(5000) // Delay in milliseconds
  
  // Status
  status          String @default("pending") // "pending" | "processing" | "completed" | "failed"
  errorMessage    String?
  
  // Scheduling
  scheduledFor    DateTime @default(now())
  lockedUntil     DateTime? // For preventing concurrent processing
  processedBy     String? // Worker/process ID
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sync_queue")
  @@index([status, scheduledFor])
  @@index([platform])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}
